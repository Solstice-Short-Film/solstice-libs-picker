// **************************************************************************
//
// SCRIPT NAME: vlRigIt_snap_ikFk
// 
// VERSION: 004
// LAST MODIFIED: 16.05.2014
// BY: Vincenzo Leombruno - vincleombruno@gmail.com
//
//
// RELEASE NOTES:
//
// 005 - delete the transforms remaining in the ik to fk switch (kike)
// 004 - removed old code
// 003 - Getting controls and joints via meessge connections
// 002 - Re-organized and re-named. Some functions have been taken-out to be used in other contexts (works with "time travelling kids")
// 001 -
//----------------------------------------------------OLD vlRigIt()
// 006 - creates "dummy object" and "dummy object group" while snapping IK_to_FK to avoid cycle
// 005 - foot snap fixing
// 004 - moves PV further to be more visible after snap
// 003 - some fixing in FK to IK snap
// 002 - if the "FK_IK" and/or "parent" attributes do not have keys, pops up a window to ask what to do
// 001 - BeeAndBird modified vlRigIt_snap_ikFk//
//
//
// USAGE NOTES:
// does snapping for FK_IK and dynamic parenting
// launched by the vl_contextualMenuBuilder()
//
// **************************************************************************
//vlRigIt_snap_ikFk( "L_leg1_ctrlsGrp", 1)
global proc vlRigIt_snap_ikFk( string $switcher, int $goToMode)
{
    //$goToMode
    //      1: fk -> ik
    //      0: ik -> fk
    string $oldSel[] = `ls -sl -l`;

    //recupero il namespace dal nome dello switcher
    string $namespace;
    string $objectShortName = $switcher;
    string $namespaceBuffer[]; tokenize $switcher ":" $namespaceBuffer;

    if (`size($namespaceBuffer)` > 1){
        $namespace = ($namespaceBuffer[0] + ":");
        $objectShortName = ($namespaceBuffer[size($namespaceBuffer)-1]);
    }

    //recupero i controlli interessati
    int $isSpine = 0;

    string $rigStuffGrpL[] = `listConnections ($switcher + ".rigStuffGrp")`;
    string $rigStuffGrp = $rigStuffGrpL[0]  ;
    string $fkCTRLs[] = `listConnections ($switcher + ".fkControlsL")`;
    string $ikCTRLs[] = `listConnections ($switcher + ".ikControlsL")`;

    //lavoro solo per legs e arms
    if ( (`attributeExists "ikJointsL" $rigStuffGrp`) && (`attributeExists "fkJointsL" $rigStuffGrp`) ){
        string $splitObjectNameBuffer[]; tokenize $objectShortName "_" $splitObjectNameBuffer;
        string $side = $splitObjectNameBuffer[0];           //-->>  mantenere
        string $bodyPart = $splitObjectNameBuffer[1];       //-->>  mantenere e controllare con systems
        int $isLeg = `gmatch $bodyPart "*leg*"`;
        string $ik_jntL[] = `listConnections ($rigStuffGrp + ".ikJointsL")`;                                              //-->>
        string $fk_jntL[] = `listConnections ($rigStuffGrp + ".fkJointsL")`;

        //____IK_to_FK_________________________________________________
        //magari creare una catena nuova. Se ci sono keys puï¿½ essere che il constraint dia fastidio...
        if (!$goToMode){
            for ($i=0;$i<size($fkCTRLs); $i++){
                string $fkCTRLsPL[] = `listRelatives -parent $fkCTRLs[$i]`;
                string $fkCTRLsP = $fkCTRLsPL[0];

                int $ctrlRotationOrder = `getAttr ($fkCTRLs[$i] + ".rotateOrder")`;
                string $dummyGrp = `createNode "transform"`;
                string $dummy = `createNode "transform" -parent $dummyGrp`;
                setAttr ($dummyGrp + ".rotateOrder") $ctrlRotationOrder;
                setAttr ($dummy + ".rotateOrder") $ctrlRotationOrder;
                string $tempCns1[] = `parentConstraint $fkCTRLsP $dummyGrp`; delete $tempCns1;
                string $tempCns2[] = `parentConstraint $ik_jntL[$i] $dummy`;
                float $rot[] = `getAttr ($dummy + ".rotate")`;
                float $pos[] = `getAttr ($dummy + ".translate")`;
                delete $tempCns2;
                setAttr ($fkCTRLs[$i] + ".rotate") -type "double3" $rot[0] $rot[1] $rot[2];
                setAttr ($fkCTRLs[$i] + ".translate") -type "double3" $pos[0] $pos[1] $pos[2];
                delete $dummyGrp;
            }
        }

        //____FK_to_IK_________________________________________________
        else{
            string $ikRotY_jnt = $ik_jntL[1];
            string $endPosition_fk_jnt = $fk_jntL[2];

            //porto i valori del ik_ctrl a 0
            string $skipAttrs[] = {"PV", "parent", "gimbalHelper", "stretchy"};
            string $ikCtrl_allAttrsL[] = `listAttr -keyable -unlocked -userDefined $ikCTRLs[0]`;
            string $ikCtrl_attrsToZero[] = stringArrayRemove($skipAttrs, $ikCtrl_allAttrsL);
            for ($obj in $ikCtrl_attrsToZero){ setAttr ($ikCTRLs[0] + "." + $obj) 0; }

            //le prossime tre righe sono per il piede, che non ha il pivot alla caviglia
            //(ovvero nel $endPosition_fk_jnt)
            string $ikCtrl_tempParent = `createNode "transform"`;
            string $tempCns[] = `parentConstraint $ikCTRLs[0] $ikCtrl_tempParent`;delete $tempCns;
            string $tempCns[] = `pointConstraint ($ik_jntL[2]) $ikCtrl_tempParent`;delete $tempCns;
            string $ikCtrl_tempConstraint[] = `parentConstraint -mo $ikCtrl_tempParent $ikCTRLs[0]`;
            //creo i gruppi per calcolare la posizione del poleVector
            //controllare l'angolo tra i joints fk nel caso in cui sia 0, ovvero se sono tesi il braccio/gamba
            string $pvCalc_locsL[];
            for ($i=0;$i<3;$i++){
                string $L[] = `spaceLocator`;
                $pvCalc_locsL[$i] = $L[0];
                string $tempCns[] = `pointConstraint $fkCTRLs[$i] $pvCalc_locsL[$i]`; delete $tempCns;
            }

            //creo il triangolo poly per il calcolo della normale etc
            float $pA[] = `pointPosition $pvCalc_locsL[0]`; vector $point0 = vector($pA);
            float $pB[] = `pointPosition $pvCalc_locsL[1]`; vector $point1 = vector($pB);
            float $pC[] = `pointPosition $pvCalc_locsL[2]`; vector $point2 = vector($pC);
            float $a = `mag ($point0 - $point1)`;
            string $tempPolyL[] = `polyCreateFacet -ch 0 -p $pA[0] $pA[1] $pA[2] -p $pB[0] $pB[1] $pB[2] -p $pC[0] $pC[1] $pC[2]`;
            string $tempPoly = $tempPolyL[0];
            string $normalL[] = `polyInfo -faceNormals ($tempPoly + ".f[0]")`;
            string $buffer1[]; tokenize $normalL[0] ":" $buffer1;
            string $normalComponents[]; tokenize $buffer1[1] " " $normalComponents;
            $normX = float($normalComponents[0]);
            $normY = float($normalComponents[1]);
            $normZ = float($normalComponents[2]);

            //calcolo la distanza tra spalla e gomito
            float $pvDist = `mag ($point0 - $point1)`;

            //calcolo l'angolo
            string $angleCalcLocsAL[] = `spaceLocator`; string $tempCns[] = `pointConstraint $fkCTRLs[0] $angleCalcLocsAL[0]`; delete $tempCns;
            string $angleCalcLocsBL[] = `spaceLocator`; string $tempCns[] = `pointConstraint $fkCTRLs[0] $angleCalcLocsBL[0]`; delete $tempCns;
            string $tempCns[] = `aimConstraint -worldUpVector $normX $normY $normZ $fkCTRLs[1] $angleCalcLocsAL`; delete $tempCns;
            string $tempCns[] = `aimConstraint -worldUpVector $normX $normY $normZ $fkCTRLs[2] $angleCalcLocsBL`; delete $tempCns;
            string $vectProd1 = `createNode "vectorProduct"`; setAttr ($vectProd1 + ".operation") 3; setAttr ($vectProd1 + ".input1X") 1;
            string $vectProd2 = `createNode "vectorProduct"`; setAttr ($vectProd2 + ".operation") 3; setAttr ($vectProd2 + ".input1X") 1;
            connectAttr ($angleCalcLocsAL[0] + ".matrix") ($vectProd1 + ".matrix");
            connectAttr ($angleCalcLocsBL[0] + ".matrix") ($vectProd2 + ".matrix");
            string $angleBetw = `createNode "angleBetween"`;
            connectAttr ($vectProd1 + ".output") ($angleBetw + ".vector1");
            connectAttr ($vectProd2 + ".output") ($angleBetw + ".vector2");
            float $angle = `getAttr ($angleBetw + ".angle")`;
            float $c = $a * (cos(deg_to_rad($angle)));
            float $dist = $a * (sin(deg_to_rad($angle)));
            string $closestLocL[] = `spaceLocator`;
            parent -r $closestLocL[0] $angleCalcLocsBL[0];
            setAttr ($closestLocL[0] + ".translate") $c 0 ($dist + $pvDist);

            //snappo il poleVector
            string $tempCns[] = `pointConstraint $closestLocL[0] $ikCTRLs[1]`;
            float $pos[] = `getAttr ($ikCTRLs[1] + ".translate")`;
            delete $tempCns;
            setAttr ($ikCTRLs[1] + ".translate") $pos[0] $pos[1] $pos[2];
            //snappo il controllo ik
            float $mirrorOffset[] = {0.0, 0.0, 0.0};
            if ($side == "R"){
                $mirrorOffset = {180.0, 0.0, 0.0};
            }
            if ($isLeg){
                $mirrorOffset = {0.0, 0.0, 90};
                if ($side == "R"){
                    $mirrorOffset = {0.0, 180.0, -90.0} ;
                }
            }
            string $tempCns[] = `pointConstraint $fkCTRLs[2] $ikCtrl_tempParent`;delete $tempCns;
            string $tempCns[] = `orientConstraint
                        -offset $mirrorOffset[0] $mirrorOffset[1] $mirrorOffset[2]
                        $fkCTRLs[2] $ikCtrl_tempParent`;
            delete $tempCns;


            //via le utilities
            float $pos[] = `getAttr ($ikCTRLs[0] + ".translate")`;
            float $rot[] = `getAttr ($ikCTRLs[0] + ".rotate")`;
            delete $ikCtrl_tempConstraint;
            setAttr ($ikCTRLs[0] + ".translate") $pos[0] $pos[1] $pos[2];
            setAttr ($ikCTRLs[0] + ".rotate") $rot[0] $rot[1] $rot[2];

            delete  $ikCtrl_tempParent
                    $pvCalc_locsL
                    $tempPolyL
                    $closestLocL
                    $angleCalcLocsAL
                    $angleCalcLocsBL
                ;

            if (`attributeExists "toeTap" $ikCTRLs[0]`){
                float $tap = `getAttr ($fkCTRLs[3] + ".rotateY")`;
                setAttr ($ikCTRLs[0] + ".toeTap") $tap;
            }
        }
    }

    //porto l'attributo switcher sulla modalitï¿½ scelta
    setAttr ($switcher + ".FK_IK") $goToMode;
    select -r $oldSel;

}